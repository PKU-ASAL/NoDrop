import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import FuncFormatter
from math import ceil

x1 = {}
y1 = {}
x2 = {}
y2 = {}

labels = ['8M', '64M', '256M', '768M']

# def parse(x, y):
# 	dp = []
# 	pos = []
# 	tx = []
# 	ty = []
# 	for i in range(len(x)):
# 		tx.append(x[i] * 1e3)
# 		ty.append(y[i] * 1e3)

# 	ttx = []
# 	tty = []
# 	for i in range(len(x)):
# 		dp.append(1)
# 		pos.append(i)
# 		for j in range(i):
# 			if tx[i] > tx[j]:
# 				if dp[i] < dp[j] + 1:
# 					pos[i] = j
# 					dp[i] = dp[j] + 1

# 	mx_p = 0
# 	mx, mn = 0, 1e9
# 	for i in range(len(dp)):
# 		if dp[mx_p] < dp[i]:
# 			mx_p = i
# 	while mx_p != pos[mx_p]:
# 		ttx.append(tx[mx_p])
# 		tty.append(ty[mx_p])
# 		mx_p = pos[mx_p]

# 	ttx.append(tx[mx_p])
# 	tty.append(ty[mx_p])
# 	ttx.reverse()
# 	tty.reverse()

# 	for i, j in zip(ttx, tty):
# 		if i == j:
# 			mx = max(mx, i)
# 			mn = min(mn, i)
# 	print(mx, mn)
# 	return ttx, tty, mx, mn

def update_scale_value(temp, position):
    result = temp//1e6
    return "{}M".format(int(result))

def parse_max(x, y):
	mx = 0
	for i, j in zip(x, y):
		# if i == j:
		mx = max(mx, i, j)
	return mx

def parse_min(x, y):
	mn = 1e9
	for i, j in zip(x, y):
		# if i == j:
		mn = min(mn, i, j)
	return mn


x1['8M'] = [4266000,16275803,40244036,80379000,120455576,160611956,200677637,240671059,280729720,320728862,360804245,400870920,802003173,901685769,1001990808]
y1['8M'] = [2792300,9375973,10287116,9261329,8572923,8789389,8667807,8781262,9398316,8513491,8644307,10158064,8876042,13627410,11938111]
x2['8M'] = [4053139,16054346,40137452,80277720,120281554,160322992,200403043,240455965,280503981,320542721,360604930,400723857,801467291,901644468,1001953324]
y2['8M'] = [4053139,9077903,11771506,10662673,14265858,10164645,10830288,8632665,16825643,16752179,17355562,16822824,17491535,20193674,23135747]

x1['64M'] = [4193973,16283757,40233337,80265733,120426114,160476038,200565103,240777563,280792972,320845492,360888207,401148851,801828483,901971039,1001873499]
y1['64M'] = [4193973,16283757,40233337,67311112,66492109,66737357,69405089,66528064,66538599,66482536,66710160,66734799,66796402,66726488,66888141]
x2['64M'] = [4102247,16044731,40066670,80109566,120265901,160331329,200390661,240594254,280665906,320831901,360999573,400743976,801503498,901823681,1001735368]
y2['64M'] = [4102247,16044731,40066670,69100178,68985312,69599459,66727759,66783159,69536762,67568568,67038795,68164773,75769329,67900338,69036096]

x1['256M'] = [4344666,16284225,40380512,80443735,120520275,160665340,200857004,240802333,280852823,320875378,360869849,400862033,801597659,901952646,1002094543]
y1['256M'] = [4344666,16284225,40380512,80443735,120520275,160665340,200857004,240802333,263776152,265201066,265389224,265174220,266001267,265349119,270889220]
x2['256M'] = [4181161,16191878,40222323,80337898,120340241,160399536,200553170,240608299,280581895,320611976,360625735,400807692,801408717,901780861,1001692492]
y2['256M'] = [4181161,16191878,40222323,80337898,120340241,160399536,200553170,240608299,262399116,267719999,266556840,265282219,271844381,266479050,269415977]

x1['768M'] = [4206439,16219633,40318734,80278930,120359323,160528859,200679664,240604723,280627983,320797750,360805948,400959205,801575890,902341028,1001972925]
y1['768M'] = [4206439,16219633,40318734,80278930,120359323,160528859,200679664,240604723,280627983,320797750,360805948,400959205,773496587,795220241,800012926]
x2['768M'] = [4517280,16061430,40124714,80181554,120248465,160353375,200399686,240382898,280604663,320588779,360677290,400789297,801399684,902316708,1001741910]
y2['768M'] = [4517280,16061430,40124714,80181554,120248465,160353375,200399686,240382898,280604663,320588779,360677290,400789297,789014665,803161462,795579613]


def draw_figure(x, y, filename, xlabel, ylabel):
	plt.figure(figsize=(5, 5))
	mx, mn = 0, 1e9
	for i, k in enumerate(labels):

		# for p in range(len(x[k])):
		# 	x[k][p] = np.log2(x[k][p])
		# 	y[k][p] = np.log2(y[k][p])

		lw = 3 - 2 * i / len(labels)
		ls = ['-','--','-.',':'][i % 4]
		plt.plot(x[k], y[k], linestyle=ls, label=k, linewidth=lw)
		mx = max(mx, parse_max(x[k], y[k]))
		mn = min(mn, parse_min(x[k], y[k]))
	mn = int(mn * 0.95)
	mx = ceil(mx * 1.05)
	plt.plot([mn, mx], [mn, mx], '--', color='gray', label='No drop')
	plt.xlim(mn, mx)
	plt.ylim(mn, mx)
	plt.ylabel(xlabel)
	plt.xlabel(ylabel)
	plt.legend()
	plt.gca().xaxis.set_major_formatter(FuncFormatter(update_scale_value))
	plt.gca().yaxis.set_major_formatter(FuncFormatter(update_scale_value))
	plt.savefig(filename, bbox_inches='tight', pad_inches=0)
	plt.show()

draw_figure(x1, y1, "buffer-sysdig.pdf", '#Received Events', '#Total Events')
draw_figure(x2, y2, "buffer-scapopen.pdf", '#Received Events', '#Total Events')